name: Continuous Integration

on:
  push:
    branches:
      - '**'  # all branches
  pull_request:

jobs:
  ci:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.11
          - 3.12
          - 3.13
      # max-parallel: 2
    steps:
      # download source for this repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # cache Poetry and pip directories to speed up subsequent runs
      - name: Cache Poetry / pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      # install dependencies from common template
      - name: Install common dependencies
        uses: ./.github/actions/install-deps
        with:
          python-version: ${{ matrix.python-version }}

      # install the package for this repo
      - name: Install package
        run: |
          poetry install

      - name: Fix docstring_parser packages inside Poetry venv
        shell: bash
        run: |
          set -euo pipefail

          # Detect versions using poetry-run pip show (tolerant when not installed)
          doc_ver=$(poetry run pip show docstring-parser 2>/dev/null | awk -F': ' '/^Version:/{print $2}' || true)
          if [ -z "$doc_ver" ]; then
            doc_ver=$(poetry run pip show docstring_parser 2>/dev/null | awk -F': ' '/^Version:/{print $2}' || true)
          fi

          doc_fork_ver=$(poetry run pip show docstring-parser-fork 2>/dev/null | awk -F': ' '/^Version:/{print $2}' || true)
          if [ -z "$doc_fork_ver" ]; then
            doc_fork_ver=$(poetry run pip show docstring_parser_fork 2>/dev/null | awk -F': ' '/^Version:/{print $2}' || true)
          fi

          echo "Detected in venv: docstring_parser=${doc_ver:-<none>}, docstring_parser_fork=${doc_fork_ver:-<none>}"

          # Uninstall all likely variants (ignore errors)
          poetry run pip uninstall -y docstring-parser docstring_parser docstring-parser-fork docstring_parser_fork || true

          if [ -n "$doc_ver" ]; then
            echo "Reinstalling docstring-parser==$doc_ver"
            poetry run pip install --ignore-installed "docstring-parser==$doc_ver"
          else
            echo "docstring_parser not present in venv; skipping reinstall"
          fi

          if [ -n "$doc_fork_ver" ]; then
            echo "Reinstalling docstring-parser-fork==$doc_fork_ver"
            poetry run pip install --ignore-installed "docstring-parser-fork==$doc_fork_ver"
          else
            echo "docstring_parser_fork not present in venv; installing latest"
            poetry run pip install --ignore-installed docstring-parser-fork
          fi

      - name: Run pre-commit checks
        run: |
          mkdir .local
          poetry run pre-commit run --all-files

      # upload coverage to Codecov
      - name: Upload coverage to Codecov (main/PR only)
        uses: codecov/codecov-action@v5
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
        with:
          files: .local/coverage
          fail_ci_if_error: true
